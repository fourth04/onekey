# onekey使用说明

---

[toc]

---

## 程序简介

本程序使用[gin](github.com/gin-gonic/gin)框架实现简单的Restful api服务，主要实现以下功能：

1. 用户鉴权，使用JWT实现用户鉴权
2. 用户分权，区分普通用户和管理员用户
3. 用户限速，针对不同的用户实行不同的限速策略
4. 用户增删改查

## 源码安装

### 下载安装

```bash
go get -u github.com/fourth04/onekey
```

用户鉴权数据存储于数据库，所以需要安装数据库，本程序使用gorm作为orm库，支持SQLit、MySQL、postgres等

### 编译

进入`onekey`目录，运行：

    go build

即可

## 下载可执行文件安装

1. 拷可执行过去：/home/device/onekey
2. 拷配置文件过去：/home/device/config.json
3. 拷服务控制脚本过去：/home/gopath/src/github.com/fourth04/onekey/script/onekey.service
4. 拷前端文件过去：/home/device/Ydevice

## 快速使用

### 修改配置文件

配置文件模板存放于：`onekey/docs/config.json`文件，修改相关项即可

```json
{
    "log_filepath": "onekey.log",    // log保存位置
    "dialect": "postgres",  // 使用的数据库
    "db_path": "user=gdgyy password=123456Qw! dbname=http sslmode=disable", // 数据库连接信息
    "db_log_mode": true,    // 是否启用数据库sql回显来debug
    "jwt_realm": "test zone",   // jwt realm
    "jwt_key": "secret key",    // jwt key
    "jwt_timeout": "2h",    // jwt timeout
    "jwt_max_refresh": "2h",    // jwt max refresh
    "uri": ":8080", // 启用web的uri
    "static_dir": "Ydevice/dist",   // 渲染前端所使用的静态文件目录
    "index_filepath": "Ydevice/index.html"  // 渲染前端所使用的首页html
}
```

例如：

```json
{
    "log_filepath": "/var/log/onekey.log",
    "dialect": "sqlite3",
    "db_path": "/home/device/user.db",
    "db_log_mode": true,
    "jwt_realm": "test zone",
    "jwt_key": "secret key",
    "jwt_timeout": "2h",
    "jwt_max_refresh": "2h",
    "uri": ":8080",
    "static_dir": "/home/device/Ydevice/dist",
    "index_filepath": "/home/device/Ydevice/index.html"
}
```

### 使用systemctl运行服务

1. 修改服务文件

服务文件存放于：`onekey/script/onekey.service`文件，修改相关项即可，主要是如下两处：

-   WorkingDirectory=/home/gdgyy
-   ExecStart=/home/gopath/bin/onekey -c config.json

其中：

-   WorkingDirectory是配置文件所在目录
-   ExecStart里需要配执行文件所在绝对路径

2. 拷贝服务文件到服务文件目录

    cp onekey.service /usr/lib/systemd/system/onekey.service

3. 更新systemctl服务脚本列表

    systemctl daemon-reload

4. 启动服务

    systemctl start onekey

5. 将服务加入开机启动

    systemctl enable onekey

6. 查看服务状态

    systemctl status onekey

7. 停止服务

    systemctl stop onekey

### 使用命令运行服务

    .\onekey -c config.json

### 初始化管理员账户

`注意`：初始运行程序时会自动新建users表，但是由于api做了鉴权，只有管理员才有权限增删改查用户，而此时数据库中并没有数据，所以直接使用sql，新建一个使用`admin/123456Qw!`作为账号密码的用户：

#### postgres

```sql
-- 新增admin/123456Qw!用户，限速9999/min
INSERT INTO "public"."users"("id", "username", "password", "salt", "rate_formatted") VALUES (1, 'admin', 'ca05604b54391165080a648b06461f8a', '8lKOS6N2JC', '9999-M');
-- 新增test/123456Qw!，限速3000/hour
INSERT INTO "public"."users"("id", "username", "password", "salt", "rate_formatted") VALUES (2, 'test', 'c77bb779e5a4b27edec25f5cbbe51f3b', '18uOpaJ0Gp', '3000-H');

-- 新增admin角色
INSERT INTO "public"."roles"("id", "role_name", "role_label") VALUES (1, 'admin', '管理员');
-- 新增normal角色
INSERT INTO "public"."roles"("id", "role_name", "role_label") VALUES (2, 'normal', '普通用户');

-- 绑定admin用户到admin角色
INSERT INTO "public"."user_roles"("user_id", "role_id") VALUES (1, 1);
-- 绑定test用户到normal角色
INSERT INTO "public"."user_roles"("user_id", "role_id") VALUES (2, 2);

-- 新增通用资源权限类型
INSERT INTO "public"."permission_types"("id", "permission_type_name", "permission_type_label") VALUES (1, 'resource', '通用权限类型');
-- 新增前端路由权限类型
INSERT INTO "public"."permission_types"("id", "permission_type_name", "permission_type_label") VALUES (2, 'frontend_path', '前端路径');
-- 新增后端路由权限类型
INSERT INTO "public"."permission_types"("id", "permission_type_name", "permission_type_label") VALUES (3, 'backend_path', '后端路径');

-- 新增功能操作
INSERT INTO "public"."operations"("id", "operation_name", "operation_label", "permission_type_id") VALUES (1, 'add', '新增', 1);
INSERT INTO "public"."operations"("id", "operation_name", "operation_label", "permission_type_id") VALUES (2, 'del', '删除', 1);
INSERT INTO "public"."operations"("id", "operation_name", "operation_label", "permission_type_id") VALUES (3, 'edit', '修改', 1);
INSERT INTO "public"."operations"("id", "operation_name", "operation_label", "permission_type_id") VALUES (4, 'view', '查看', 1);

-- 新增通用资源
INSERT INTO "public"."resources"("id", "resource_name", "resource_label", "permission_type_id") VALUES (1, 'resource', '通用资源', 1);
-- 新增前端路径资源
INSERT INTO "public"."resources"("id", "resource_name", "resource_label", "permission_type_id") VALUES (2, '/users', '增删改查用户界面', 2);
-- 新增后端路径资源
INSERT INTO "public"."resources"("id", "resource_name", "resource_label", "permission_type_id") VALUES (3, '/api/users', '增删改查用户接口', 3);

-- 新增后端路径-新增-用户接口权限
INSERT INTO "public"."permissions"("id", "permission_type_id", "operation_id", "resource_id") VALUES (1, 1, 1, 1);
-- 新增后端路径-删除-用户接口权限
INSERT INTO "public"."permissions"("id", "permission_type_id", "operation_id", "resource_id") VALUES (2, 1, 2, 1);
-- 新增后端路径-修改-用户接口权限
INSERT INTO "public"."permissions"("id", "permission_type_id", "operation_id", "resource_id") VALUES (3, 1, 3, 1);
-- 新增后端路径-查看-用户接口权限
INSERT INTO "public"."permissions"("id", "permission_type_id", "operation_id", "resource_id") VALUES (4, 1, 4, 1);

-- 给admin用户绑定增删改查权限
-- 给普通用户绑定查权限
-- 注意，其实最大颗粒度的权限控制，可以直接判断用户是普通用户还是管理员
INSERT INTO "public"."role_permissions"("role_id", "permission_id") VALUES (1, 1);
INSERT INTO "public"."role_permissions"("role_id", "permission_id") VALUES (1, 2);
INSERT INTO "public"."role_permissions"("role_id", "permission_id") VALUES (1, 3);
INSERT INTO "public"."role_permissions"("role_id", "permission_id") VALUES (1, 4);
INSERT INTO "public"."role_permissions"("role_id", "permission_id") VALUES (2, 4);
```

#### mysql/sqlite

```sql
-- 新增admin/123456Qw!用户，限速9999/min
INSERT INTO users(id, username, password, salt, rate_formatted) VALUES (1, 'admin', 'ca05604b54391165080a648b06461f8a', '8lKOS6N2JC', '9999-M');
-- 新增test/123456Qw!，限速3000/hour
INSERT INTO users(id, username, password, salt, rate_formatted) VALUES (2, 'test', 'c77bb779e5a4b27edec25f5cbbe51f3b', '18uOpaJ0Gp', '3000-H');

-- 新增admin角色
INSERT INTO roles(id, role_name, role_label) VALUES (1, 'admin', '管理员');
-- 新增normal角色
INSERT INTO roles(id, role_name, role_label) VALUES (2, 'normal', '普通用户');

-- 绑定admin用户到admin角色
INSERT INTO user_roles(user_id, role_id) VALUES (1, 1);
-- 绑定test用户到normal角色
INSERT INTO user_roles(user_id, role_id) VALUES (2, 2);

-- 新增通用资源权限类型
INSERT INTO permission_types(id, permission_type_name, permission_type_label) VALUES (1, 'resource', '通用权限类型');
-- 新增前端路由权限类型
INSERT INTO permission_types(id, permission_type_name, permission_type_label) VALUES (2, 'frontend_path', '前端路径');
-- 新增后端路由权限类型
INSERT INTO permission_types(id, permission_type_name, permission_type_label) VALUES (3, 'backend_path', '后端路径');

-- 新增功能操作
INSERT INTO operations(id, operation_name, operation_label, permission_type_id) VALUES (1, 'add', '新增', 1);
INSERT INTO operations(id, operation_name, operation_label, permission_type_id) VALUES (2, 'del', '删除', 1);
INSERT INTO operations(id, operation_name, operation_label, permission_type_id) VALUES (3, 'edit', '修改', 1);
INSERT INTO operations(id, operation_name, operation_label, permission_type_id) VALUES (4, 'view', '查看', 1);

-- 新增通用资源
INSERT INTO resources(id, resource_name, resource_label, permission_type_id) VALUES (1, 'resource', '通用资源', 1);
-- 新增前端路径资源
INSERT INTO resources(id, resource_name, resource_label, permission_type_id) VALUES (2, '/users', '增删改查用户界面', 2);
-- 新增后端路径资源
INSERT INTO resources(id, resource_name, resource_label, permission_type_id) VALUES (3, '/api/users', '增删改查用户接口', 3);

-- 新增 通用资源类型-新增-通用资源表默认值 权限
INSERT INTO permissions(id, permission_type_id, operation_id, resource_id) VALUES (1, 1, 1, 1);
-- 新增 通用资源类型-删除-通用资源表默认值 权限
INSERT INTO permissions(id, permission_type_id, operation_id, resource_id) VALUES (2, 1, 2, 1);
-- 新增 通用资源类型-修改-通用资源表默认值 权限
INSERT INTO permissions(id, permission_type_id, operation_id, resource_id) VALUES (3, 1, 3, 1);
-- 新增 通用资源类型-查看-通用资源表默认值 权限
INSERT INTO permissions(id, permission_type_id, operation_id, resource_id) VALUES (4, 1, 4, 1);

-- 给admin用户绑定增删改查权限
-- 给普通用户绑定查权限
-- 注意，其实最大颗粒度的权限控制，可以直接判断用户是普通用户还是管理员
INSERT INTO role_permissions(role_id, permission_id) VALUES (1, 1);
INSERT INTO role_permissions(role_id, permission_id) VALUES (1, 2);
INSERT INTO role_permissions(role_id, permission_id) VALUES (1, 3);
INSERT INTO role_permissions(role_id, permission_id) VALUES (1, 4);
INSERT INTO role_permissions(role_id, permission_id) VALUES (2, 4);
```

### api使用说明

以下演示使用[httpie](https://github.com/jkbrzt/httpie)实现，可自行使用curl，或者带界面的postman

#### 获取JWT

首先设置以下环境变量：

```bash
# Linux
export BASE_URL="http://localhost:8080"

# Windows
set BASE_URL="http://localhost:8080"
```

修改 username/password 以便获取JWT:

```bash
# Linux
http POST $BASE_URL/api/auth/login grant_type=password username=admin password=123456Qw\!

# Windows
http POST %BASE_URL%/api/auth/login grant_type=password username=admin password=123456Qw\!
```

正确响应样例：

```json
{
    "code": 200,
    "expire": "2018-07-08T13:01:55+08:00",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJDcmVhdGVkQXQiOiIyMDE4LTA3LTA3VDEwOjQ4OjE3LjM1MTUwOCswODowMCIsIklEIjoxLCJSYXRlRm9ybWF0dGVkIjoiMTAwMDAtTSIsIlJvbGVOYW1lIjoiYWRtaW4iLCJVcGRhdGVkQXQiOiIyMDE4LTA3LTA3VDEwOjQ4OjE3LjM1MTUwOCswODowMCIsIlVzZXJuYW1lIjoiYWRtaW4iLCJleHAiOjE1MzEwMjYxMTUsImlkIjoiYWRtaW4iLCJvcmlnX2lhdCI6MTUzMTAxODkxNX0.Lt1ouXhPL3-IXCrhTzfuir-7fx0bkuRqQ8els0VAOnw"
}
```

#### 刷新JWT

首先设置以下环境变量：

```bash
# Linux
export JWT_TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJDcmVhdGVkQXQiOiIyMDE4LTA3LTA3VDEwOjQ4OjE3LjM1MTUwOCswODowMCIsIklEIjoxLCJSYXRlRm9ybWF0dGVkIjoiMTAwMDAtTSIsIlJvbGVOYW1lIjoiYWRtaW4iLCJVcGRhdGVkQXQiOiIyMDE4LTA3LTA3VDEwOjQ4OjE3LjM1MTUwOCswODowMCIsIlVzZXJuYW1lIjoiYWRtaW4iLCJleHAiOjE1MzEwMjYxMTUsImlkIjoiYWRtaW4iLCJvcmlnX2lhdCI6MTUzMTAxODkxNX0.Lt1ouXhPL3-IXCrhTzfuir-7fx0bkuRqQ8els0VAOnw"

# Windows
set JWT_TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJDcmVhdGVkQXQiOiIyMDE4LTA3LTA3VDEwOjQ4OjE3LjM1MTUwOCswODowMCIsIklEIjoxLCJSYXRlRm9ybWF0dGVkIjoiMTAwMDAtTSIsIlJvbGVOYW1lIjoiYWRtaW4iLCJVcGRhdGVkQXQiOiIyMDE4LTA3LTA3VDEwOjQ4OjE3LjM1MTUwOCswODowMCIsIlVzZXJuYW1lIjoiYWRtaW4iLCJleHAiOjE1MzEwMjYxMTUsImlkIjoiYWRtaW4iLCJvcmlnX2lhdCI6MTUzMTAxODkxNX0.Lt1ouXhPL3-IXCrhTzfuir-7fx0bkuRqQ8els0VAOnw"
```

```bash
# Linux
http POST $BASE_URL/api/auth/refresh_token Authorization:"Bearer $JWT_TOKEN"

# Windows
http GET %BASE_URL%/api/auth/refresh_token Authorization:"Bearer %JWT_TOKEN%"
```

#### 用户管理

##### 获取所有用户

```bash
# Linux
http $BASE_URL/api/users Authorization:"Bearer $JWT_TOKEN"

# Windows
http %BASE_URL%/api/users Authorization:"Bearer %JWT_TOKEN%"
```

##### 通过某个id获取用户

```bash
# Linux
http $BASE_URL/api/users/1 Authorization:"Bearer $JWT_TOKEN"

# Windows
http %BASE_URL%/api/users/1 Authorization:"Bearer %JWT_TOKEN%"
```

##### 新增用户

```bash
# Linux
http POST $BASE_URL/api/users Authorization:"Bearer $JWT_TOKEN" username=test password=123456 role_name=user rate_formatted=100-S

# Windows
http POST %BASE_URL%/api/users Authorization:"Bearer %JWT_TOKEN%" username=test password=123456 role_name=user rate_formatted=100-S
```

##### 更新用户

```bash
# Linux
http PUT $BASE_URL/api/users/2 Authorization:"Bearer $JWT_TOKEN" username=test_update password=654321 role_name=admin rate_formatted=1000-H

# Windows
http PUT %BASE_URL%/api/users/2 Authorization:"Bearer %JWT_TOKEN%" username=test_update password=654321 role_name=admin rate_formatted=1000-H
```

##### 删除用户

```bash
# Linux
http DELETE $BASE_URL/api/users/4 Authorization:"Bearer $JWT_TOKEN"

# Windows
http DELETE %BASE_URL%/api/users/4 Authorization:"Bearer %JWT_TOKEN%"
```

##### 更改用户密码

```bash
# Linux
http PUT $BASE_URL/api/users/change_user_password/2 Authorization:"Bearer $JWT_TOKEN" old_password=123456Qw\! new_password=654321Qw\!

# Windows
http PUT %BASE_URL%/api/users/change_user_password/2 Authorization:"Bearer %JWT_TOKEN%" old_password=123456Qw\! new_password=654321Qw\!
```
